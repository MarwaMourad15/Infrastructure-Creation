version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Choose either one of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
  # aws-cli: circleci/aws-cli@2.0.3
# Define the jobs we want to run for this project
commands:
  destroy_env:
    steps:
      - run:
          name: Destroy Env
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}
          
jobs:
  create_and_deploy_front_end: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file bucket.yml \
              --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
        # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
          - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete
      - destroy_env  

  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
              list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
              --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt 

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive



  # create_infrastructure: 
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Create Cloudformation Stack
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file template.yml \
  #             --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
  #             --region us-east-1
  #     - destroy_env       

  # create_cloudfront: 
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Create Cloudformation Stack using cloudfront
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file cloudfront.yml \
  #             --stack-name production-distro \
  #             --region us-east-1 \
  #             --parameter-overrides PipelineID="mybucket-237289736665" \
  #             --tags project=udapeople 
  #     - destroy_env     

  # configure_infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #           # You can get this ID in the section where you registered the SSH Key
  #           fingerprints: ["	d8:31:12:9b:8a:24:17:3e:36:7c:93:ee:62:3a:7c:29"] 
  #     - run:
  #         name: Install Ansible
  #         command: |
  #           # Install Ansible
  #           apk add --update ansible
  #     - run:
  #         name: Run Playbook and Configure server
  #         command: |
  #           # Your command
  #           ansible-playbook -i inventory main.yml

  # tt:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: ttest
  #         command: | 
  #           aws cloudformation deploy \
  #           --template-file bucket.yml \
  #           --stack-name "${CIRCLE_WORKFLOW_ID}" \
  #           --parameter-overrides NAME="${CIRCLE_WORKFLOW_ID}"
  #     - run:
  #         name: test2
  #         command: |
  #           aws s3 sync . s3://"${CIRCLE_WORKFLOW_ID}" --delete
  #     - run:
  #         name: test3
  #         command: |
  #           aws cloudformation deploy \
  #           --template-file cloudfront.yml \
  #           --stack-name cloudfront \
  #           --parameter-overrides PipelineID="${CIRCLE_WORKFLOW_ID}"

  # smoke_test:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - run: apk add --update curl
  #     - run:
  #         name: smoke test
  #         command: |
  #           URL="https://blog.udacityyyyyy.com/"
  #           # Test if website exists
  #           if curl -s --head ${URL} 
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi
  #     - destroy_env

              
# Sequential workflow
workflows:
  # Name the workflow
  myWorkflow:
    jobs:
      - create_and_deploy_front_end
      - promote_to_production:
          requires: 
            - create_and_deploy_front_end
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production
            
      #- create_cloudfront
      #- create_infrastructure
      #- configure_infrastructure
      # - smoke_test:
      #     requires: [create_infrastructure]
          